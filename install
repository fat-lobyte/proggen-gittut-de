====== Installation und konfiguration von Git ======

In diesem Kapitel wird die Installation und die ersten Konfigurationschritte
beschrieben. Wer Git bereits installiert hat, der sollte sich zumindest die
[[#empfohlene_startkonfiguration|konfiguration]] ansehen.


===== Installation unter Linux und Unix =====

Bei den meisten Linux und Unixdistributionen ist Git bereits in den jeweiligen
Paketquellen vorhanden. Das bedeutet, dass ihr es mit einem einfachen Befehl
installieren könnt.

Sollte das tatsächlich nicht der Fall sein, oder seid ihr mit der Version der
Pakete unzufrieden, könnt ihr Git wie [[#aus_den_quellen|unten]] beschrieben auch aus
den Quellen kompilieren und installieren.

Die Dokumentation von Git ist ausgezeichnet und besteht aus manpages,
GNU-info-seiten und HTML-Seiten. Ich empfehle jedem der sich etwas genauer mit den
Git-Befehlen befassen will, sich die Anleitungen der einzelnen Befehle mit
'''git help <Befehl>''' anzusehen. Deswegen wird bei den unten angeführten
Befehlen zur Installation das Paket für die Dokumentation ebenfalls aufgelistet.


Dies ist eine Liste mit den Befehlen, die ihr auf der jeweiligen Distribution ausführen müsst um Git zu installieren:

  * Ubuntu & Debian <code>$ sudo apt-get install git git-doc</code>


  * Fedora <code># yum install git</code>


  * openSUSE <code># zypper install git-core git-doc</code>


  * Arch Linux <code># pacman -S git</code>


  * FreeBSD <code># cd /usr/ports/devel/git
# make install</code>
  oder
   <code># pkg_add -r git</code>
  
===== Installation unter Mac OS X =====

===== Installation unter Windows =====

==== msysGit ====

Um Git auf Windows zu benutzen, ist das Paket "msysGit" empfohlen. Dieses könnt
ihr von folgender Webseite herunterladen: http://git-scm.com/download/win

Startet die Installation in gewohnter Weise durch einen Doppelklick auf den
Installer, und klickt auf "Next".

Ihr werdet gefragt, wie "Git" in euer Environment integriert werden soll (wie
die Programme in die PATH-Variable kommen sollen). Lest euch die vorhandenen
Optionen mit ihren Beschreibungen durch, aber ich empfehle hier die erste
("Use Git Bash onlly") auszuwählen.

Außerdem werdet ihr gefragt, wie mit den Zeilenenden verfahren werden soll.
Diese Frage betrifft die Option "core.autocrlf"
(siehe [[#Optionen für Windows|unten]]). Ich empfehle hier ebenfalls die erste
Option auszuwählen.

Danach könnt ihr mit der Installation fortfahren.


Um anschließend eine Shell zu öffnen, in der ihr Git verwenden könnt benützt
entweder den Desktop-Verknüpfung, startet die Shell mit Start->Programme->Alle Programme->Git->Git Bash oder startet den Explorer und rechtsklickt in einem 
Ordner auf eine Weiße Fläche und wählt dann "Git Bash" aus dem Kontextmenü.

==== GitHub ====

Habt ihr vor, euer Projekt auf GitHub zu hosten, könnt ihr eine auf GitHub
spezialisierte GUI verwenden, die ihr euch hier herunterladen könnt: http://windows.github.com/

Dieses Tutorial wird hauptsächlich die Kommandozeile verwenden, also solltet ihr
die Kommandozeile starten indem ihr entweder auf die Desktop-Verknüpfung klickt,
oder aus dem Startmenü Start->Alle Programme->Github, Inc->Git Shell auswählt.

===== Aus den Quellen =====

Git kann selbstverständlich auch aus dem Quellcode kompiliert werden. Ladet euch
den aktuellen Tarball von https://github.com/git/git/tags herunter.

Entpackt es mit dem Befehl
<code>tar -xzf git-git-v*.tar.gz</code>

Wechselt in das Verzeichnis des Qellcodes und kompiliert und installiet das
Programm:
<code>cd git-git-*
make
make install</code>


Für die Konfiguration der Installation seht bitte selbst in der INSTALL-Datei
des Quellcodeverzeichnisses nach.

Zum Bauen werden folgende Komponenten benötigt:

  * zlib
  * openssl
  * Perl
  * libcurl
  * expat
  * gettext

Bitte informiert euch im Paketmanager über die Installation dieser
Abhängigkeiten.

===== Empfohlene Startkonfiguration =====

==== Vorstellung ====

Ganz zu Beginn sollte man sich bei Git vorstellen, und zwar mit dem Namen und
der E-Mail-Adresse. Diese Informationen werden in jedem Commit
(siehe [[makehis|später]]) gespeichert den ihr tätigt
((Achtung, wenn ihr eure Änderungen auf einen [[remote|entfernten Server]]
hochlädt, kann jeder der Zugriff auf diesen Server hat eure E-Mail-Adresse und
Namen lesen.)).

Gebt dazu folgendes in die Konsole ein (und ersetzt den Namen und die
E-Mail-Adresse mit der eurigen):

<code>git config --global user.name "Alexander Korsunsky"
git config --global user.email 'fat-lobyte@proggen.org'</code>

Wird ''<nowiki>--</nowiki>global'' angegeben, dann wird der jeweilige Konfigurationsschlüssel
in ~/.gitconfig gespeichert. Wird dieser Parameter ausgelassen, kommt er in die
Konfigurationsdatei des Git-repositories, indem ihr euch befindet
(./.git/config, siehe [[dirstruct|später]]).

==== Farben ====

Des weiteren ist es sehr empfohlen Farben für die Ausgaben von Git
einzuschalten, denn das hilft euch sehr beim Lesen der verschiedenen Ausgaben
und verschafft euch auf einen Blick eine Übersicht über die Ausgabe:

<code>git config --global color.ui always</code>

==== Editor ====

Außerdem braucht ihr noch einen Editor für die Benutzung. Das kann eigentlich
jeder Editor sein, dem man eine Datei als Parameter übergeben kann die er dann
öffnet.

Für Konsolenfreaks ist das natürlich vi, vim, emacs, ed, nano oder dergleichen.
Insbesondere vim und emacs sind zu empfehlen, da diese Syntaxhighlighting für
die meisten Interaktionen mit Git bereitstellen.

Den Editor könnt über die Umgebungsvariable "EDITOR" angeben, diese muss
natürlich in jeder Shell, in der ihr Git verwenden wollt gesetzt sein 
(für Bash empfiehlt es sich ''export EDITOR=vim'' in ~/.bashrc einzutragen).

Alternativ könnt ihr auch eine Option in der Git-Konfiguration setzen:
<code>git config --global core.editor vim</code>

==== Anzeige der Hilfe ====

Wie gesagt solltet ihr euch der Git-Hilfe anfreunden. Die Option
'''help.format''' bestimmt, wie die Hilfe angezeigt wird, wenn ihr
'''git help <Befehl>''' angibt.

Die möglichen Werte sind:

  * man - Zeigt Hilfeseiten als manpage mit dem dazugehörigen Pager an
  * info - Zeigt Hilfe als GNU-info-Seite an
  * web - Zeigt Hilfeseiten im Webbrowser an

Auf Unixartigen Systemen ist "man" standardmäßig gesetzt, auf Windows ist es
"web".

<code>git config --global help.format man</code>

Solltet ihr "web" wählen und es Probleme gibt oder der falsche Browser
gestartet werden, müssen die Optionen help.browser, web.browser oder
<browser.<tool>.path gesetzt werden.
Bitte informiert euch mit '''git help help''', das auch
[[http://www.kernel.org/pub/software/scm/git/docs/git-help.html|hier]] zu finden
ist.

==== Optionen für Windows ====

=== Zeilenenden ===

Die meisten Editoren speichern auf Linux Dateien mit einem einzigen Zeichen
"Line Feed"(lf) als Zeilenende. Auf Windows allerdings werden Dateien meist mit
einem "Carriage Return" und einem "Line Feed" (crlf) als Zeilenende gespeichert.
Den meisten moderneren Editoren (z.B. NotePad++ oder der Editor von Visual
Studio) ist's ziemlich Schnuppe, wie die Zeilenenden kodiert sind, aber ältere
Editoren (wie z.B. notepad.exe) werden Probleme damit haben.

Dies ist zwar genaugenommen kein Git-Problem, dennoch bietet Git hier eine
Lösung an: Git kann je nach Einstellung des Schlüssels "core.autocrlf" beim
auschecken von Dateien und beim eintragen von Änderungen die Zeilenenden
konvertieren.

Dies sind die möglichen Werte:

  * true: Beim ausgecheck nach CRLF konvertiert, und beim Eintragen nach LF konvertiert
  * input: Dateien werden so wie sie sind ausgecheckt, und beim Eintragen nach LF konvertiert
  * Nicht gesetzt: Dateien werden so wie sie sind ausgecheckt und eingecheckt 

Dies könnt ihr so setzen:
<code>git config --global core.autocrlf true</code>

Wollt ihr die Option entfernen, könnt ihr das so machen:
<code>git config --global --unset core.autocrlf</code>
  
Habt ihr Git über als msysGit-Paket installiert, wurdet ihr bereits bei der
Installation nach dieser Option gefragt.

=== Dateimodi ===

Da es unter den Dateisystemen von Windows keine "Dateimodi" (als Berechtigungen)
gibt, werden diese von Git als einen vordefinierten Wert angenommen. Ist dieser
nicht der gleiche wie der Wert in der Datenbank, werden die Dateien immer als
geändert angezeigt, auch wenn ihr die Dateien nicht angefasst habt. Deswegen
empfiehlt es sich, auf einem NTFS- oder FAT-Dateisystem stets die Option
"core.fileMode" auf "false" zu setzen:

<code>git config --global core.filemode false</code>

=== Symbolische Links ===

Sollte euer Projekt symbolische Verknüpfung enthalten, solltet ihr unter Windows die
Option "core.symlinks" auf false setzen. Dadurch wird nicht einfach zweimal die
gleiche Datei ausgecheckt, sondern der Symbolische Link wird mit einer kleinen
"Referenzdatei", die den Pfad des Ziels der Verknüpfung enthält, ersetzt.

<code>git config --global core.symlinks false</code>

Bitte beachtet, dass unter Windows symbolische Links NICHT angelegt und von Git
erfasst werden können! Nur bereits vorhandene Verknüpfungen bleiben mit dieser
Option erhalten.


[[intro|< Zurück]] | [[start|Index]] | [[makehis|Weiter >]]

------------------------

Hat dir diese Antwort geholfen? Wenn nicht oder wenn du Verbesserungs- bzw.
Erweiterungsvorschläge hast, dann schreib das bitte einfach auf die FIXME Diskussionsseite.
